function [out_gps] = get_gps_data(year, m_type, bbox, fig)
%GET_GPS_DATA get gps data given by year, machine type and a bounding box
%
%   This function uses GPS data and fieldShape data collected and generated by
%   Yaguang to get all the data limited by a year, machine type and a bounding
%   box.
%
%   Parameters:
%     Year - the year of the data
%     m_type - machine type (combine, grain kart, truck)
%     bbox - bounding box in lon/lat
%       e.g.
%              lon low, lon hi, lat low, lat hi
%       bbox = [-102.388, -102.381, 40.778, 40.786];
%     fig - flag to output figure or not
%
%  Yang Wang 09/07/2018

  year = num2str(year);
  path = '/backup-disk/data/yaguang-data/';
  gps_fname = '/filesLoadedHistory.mat';
  fs_fname = '/enhancedFieldShapes.mat';


  load(strcat(path, year, gps_fname)); % load in tracks
  load(strcat(path, year, fs_fname)); % load in field shapes

  if strcmp(m_type, 'combine')
    d_indices = fileIndicesCombines;
    gps = files(d_indices); % get only the combine data
  elseif strcmp(m_type, 'grain kart')
    d_indices = fileIndicesGrainKarts;
    gps = files(d_indices); % get only the grain kart data
  elseif strcmp(m_type, 'truck')
    d_indices = fileIndicesTrucks;
    gps = files(d_indices); % get only the truck data
  end

  l = 1;
  % we will get the fieldShapes that is in the bbox
  for m = 1:length(enhancedFieldShapes)
    if min(enhancedFieldShapes{m}.Points(:,1)) > bbox(1) & ...
      max(enhancedFieldShapes{m}.Points(:,1)) < bbox(2) & ...
      min(enhancedFieldShapes{m}.Points(:,2)) > bbox(3) & ...
      max(enhancedFieldShapes{m}.Points(:,2)) < bbox(4)
      fprintf('In bbox, field shape number is: \n\t%d\n', m);
      fs_indices(:,l) = m;
      l = l + 1;
    end
  end

  if l == 1
    error('Sorry, there is no field shape found with the given bounding box.');
  end

  fprintf('\n');

  l = 1;
  uniq_gps_data_num = [];
  ids = {};
  % we want the gps data number that is unique in the bbox
  for m = 1:length(fs_indices)
    fprintf('For field shape %d, we have the following gps data:\n', ...
      fs_indices(m));
    % load field shape that fits the bbox
    fs = enhancedFieldShapes{fs_indices(m)};
    for n = 1:length(gps)
      if sum(inShape(fs, [gps(n).lon gps(n).lat])) > 0
        fprintf('\tData number is: %d\n', n);
        fprintf('\tMachine type is: %s\n', gps(n).id);
        I = inShape(fs, [gps(n).lon gps(n).lat]);
        % we only want GPS data that is in the bbox
        gps(n).time = gps(n).time(I);
        gps(n).gpsTime = gps(n).gpsTime(I);
        gps(n).lat = gps(n).lat(I);
        gps(n).lon = gps(n).lon(I);
        gps(n).altitude = gps(n).altitude(I);
        gps(n).speed = gps(n).speed(I);
        gps(n).bearing = gps(n).bearing(I);
        gps(n).accuracy = gps(n).accuracy(I) ;
        % add the unique GPS data num to a placeholder
        if ~(ismember(n, uniq_gps_data_num)) | isempty(uniq_gps_data_num)
          uniq_gps_data_num(:,l) = n;
          ids{l} = gps(n).id;
          l = l + 1;
        end
      end
    end
    fprintf('\n');
  end

  if fig
    figure;
    hold on
    % plot the unique gps data
    for m = 1:length(uniq_gps_data_num)
      scatter(gps(uniq_gps_data_num(m)).lon, gps(uniq_gps_data_num(m)).lat, 8);
    end
    legend
    plot_google_map('maptype', 'hybrid');
  end

  uniq_ids = unique(ids);
  out_gps = cell(1, length(uniq_ids));

  for m = 1:length(uniq_ids)
    out_gps{m} = struct('type', [], ...
                        'id', [], ...
                        'time', [], ...
                        'gpsTime', [], ...
                        'lat', [], ...
                        'lon', [], ...
                        'altitude', [], ...
                        'speed', [], ...
                        'bearing', [], ...
                        'accuracy', []);
  end

  % we want to concatenate GPS data files with the same id
  for m = 1:length(uniq_ids)
    for n = 1:length(uniq_gps_data_num)
      if strcmp(gps(uniq_gps_data_num(n)).id, uniq_ids{m})
        out_gps{m} = concatenateFiles(out_gps{m}, gps(uniq_gps_data_num(n)));
      end
    end
  end

  if fig
    figure;
    hold on
    % plot the concatenated unique gps data
    for m = 1:length(uniq_ids)
      scatter(out_gps{m}.lon, out_gps{m}.lat, 8);
    end
    legend(uniq_ids);
    plot_google_map('maptype', 'hybrid');
  end
